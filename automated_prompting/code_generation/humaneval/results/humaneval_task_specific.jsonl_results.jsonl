{"task_id": "HumanEval/0", "completion": "    return any(abs(numbers[i] - numbers[j]) < threshold for i in range(len(numbers)) for j in range(i+1, len(numbers)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    from typing import List \n    paren_string = paren_string.replace(' ', '') \n    result = [] \n    stack = [] \n    start = 0 \n    for i, char in enumerate(paren_string): \n        if char == '(': \n            if not stack: \n                start = i \n            stack.append(char) \n        elif char == ')': \n            stack.pop() \n            if not stack: \n                result.append(paren_string[start:i+1]) \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0 \n    for operation in operations: \n        balance += operation \n        if balance < 0: \n        return True \n    return False", "result": "failed: expected an indented block (<string>, line 17)", "passed": false}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers); return sum(abs(x - mean) for x in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    return [element for sublist in [[num, delimeter] for num in numbers] for element in sublist][:-1] if numbers else []", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    from typing import List \n    result = [] \n    for group in paren_string.split(): \n        depth = max_depth = 0 \n        for char in group: \n            if char == '(': \n                depth += 1 \n                max_depth = max(max_depth, depth) \n            elif char == ')': \n                depth -= 1 \n        result.append(max_depth) \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    from functools import reduce \n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1)) if numbers else (0, 1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    max_so_far = -float('inf'); result = [] \n    for num in numbers: \n        if num > max_so_far: \n            max_so_far = num \n        result.append(max_so_far) \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "    if string == string[::-1]: return string \n    for i in range(len(string), -1, -1): \n        if string[:i] == string[:i][::-1]: \n            return string + string[i:][::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "    return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings: return None else: return max(strings, key=len)", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/13", "completion": "    while b != 0: a, b = b, a % b return a", "result": "failed: invalid syntax (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split() \n    beats = [] \n    for note in notes: \n        if note == 'o': \n            beats.append(4) \n        elif note == 'o|': \n            beats.append(2) \n        elif note == '.|': \n            beats.append(1) \n    return beats", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    return sum(1 for i in range(len(string)) if string.startswith(substring, i))", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}; numbers_list = numbers.split(); numbers_list.sort(key=lambda x: number_dict[x]); return ' '.join(numbers_list)", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    numbers.sort() min_diff = float('inf') closest_pair = None for i in range(len(numbers)-1): diff = numbers[i+1] - numbers[i] if diff < min_diff: min_diff = diff closest_pair = (numbers[i], numbers[i+1]) return closest_pair", "result": "failed: invalid syntax (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers); max_num = max(numbers); return [(num - min_num) / (max_num - min_num) for num in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1): if n % i == 0: return i", "result": "failed: invalid syntax (<string>, line 8)", "passed": false}
{"task_id": "HumanEval/25", "completion": "    factors = [] \n    i = 2 \n    while i * i <= n: \n        if n % i: \n            i += 1 \n        else: \n            n //= i \n            factors.append(i) \n    if n > 1: \n        factors.append(n) \n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    return [num for i, num in enumerate(numbers) if numbers.index(num) == i]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n <= 1: return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: return False \n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    import numpy as np \n    roots = np.roots(xs) \n    real_roots = [root.real for root in roots if root.imag == 0] \n    return min(real_roots, key=abs) if real_roots else None", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "completion": "    indices_divisible_by_three = [l[i] for i in range(0, len(l), 3)] \n    indices_divisible_by_three.sort() \n    for i in range(0, len(l), 3): \n        l[i] = indices_divisible_by_three[i // 3] \n    return l", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    return [l[i] if i % 2 != 0 else sorted(l[::2])[i//2] for i in range(len(l))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] \n    for i in range((len(s) + 2) // 3)] \n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups] \n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num): \n        if num < 2: \n            \\return False \n            for i in range(2, int(num**0.5) + 1): \n                if num % i == 0: \n                    return False \n        return True \n    def fib(): \n        a, b = 0, 1 \n            while True: \n                yield a \n                a, b = b, a + b \n    count = 0 \n    for num in fib(): \n        if is_prime(num): \n            count += 1 \n            if count == n: \n                return num", "result": "failed: unexpected character after line continuation character (<string>, line 19)", "passed": false}
{"task_id": "HumanEval/40", "completion": "    from itertools import combinations \n    for triple in combinations(l, 3): \n        if sum(triple) == 0: \n            return True \n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n**2", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "    return [i+1 for i in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    return any(-i in l for i in l if i != 0) or l.count(0) > 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    if x == 0: \n        return '0' \n    digits = [] \n    while x: \n        digits.append(str(x % base)) \n        x //= base \n    digits.reverse() \n    return ''.join(digits)", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    if n == 0: return 0 \n    if n == 1: return 0 \n    if n == 2: return 2 \n    if n == 3: return 0 \n    fib4 = [0, 0, 2, 0] + [0] * (n - 3) \n    for i in range(4, n + 1): fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4] \n    return fib4[n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    l.sort() \n    length = len(l) \n    if length % 2 == 0: \n        return (l[length // 2] + l[length // 2 - 1]) / 2 \n    else: \n        return l[length // 2]", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    return ''.join(char for char in text if char.lower() not in 'aeiou')", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(i < t for i in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return set(s0) == set(s1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1 \n    for _ in range(n): \n        a, b = b, a + b \n    return a", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    bracket_stack = [] \n    for bracket in brackets: \n        if bracket == '<': \n            bracket_stack.append(bracket) \n        elif bracket == '>': \n            if not bracket_stack: \n                return False n        bracket_stack.pop() \n    return not bracket_stack", "result": "failed: invalid syntax (<string>, line 22)", "passed": false}
{"task_id": "HumanEval/57", "completion": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    i = 2 \n    while i * i <= n: \n        if n % i: n        i += 1 \n        else: \n            n //= i \n    return n", "result": "failed: invalid syntax (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    return brackets.count(\"(\") == brackets.count(\")\") and brackets.find(\")\") > brackets.find(\"(\")", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0: return 0 \n    elif n == 1: return 0 \n    elif n == 2: return 1 \n    else: \n        a, b, c = 0, 0, 1 \n        for _ in range(3, n+1): \n            a, b, c = b, c, a+b+c \n        return c", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    return sum(1 for char in s if char.lower() in 'aeiou') + (1 if s[-1].lower() == 'y' else 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x) \n    if shift > len(x_str): \n        return x_str[::-1] \n        else: \n            return x_str[-shift:] + x_str[:-shift]", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    return n - sum(int(i) for i in s.split() if i.isdigit())", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "    smallest_even = float('inf') \n    smallest_index = -1 \n    for i, num in enumerate(arr): \n        if num % 2 == 0 and num < smallest_even: \n            smallest_even = num \n            smallest_index = i \n    return [smallest_even, smallest_index] if smallest_index != -1 else []", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter \n    count = Counter(lst) \n    result = -1 \n    for num, freq in count.items(): \n        if num <= freq and num > result: \n            result = num \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    lst.sort() \n    result = [] \n    while lst: \n        result.append(lst.pop(0)) \n        if lst: \n            result.append(lst.pop()) \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    import math \n    if a + b > c and a + c > b and b + c > a: \n        s = (a + b + c) / 2 \n        area = math.sqrt(s * (s - a) * (s - b) * (s - c)) \n        return round(area, 2) \n    else: \n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    return sum(arr[i] != arr[-i-1] for i in range(len(arr)//2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    return lst1 if sum(len(i) for i in lst1) <= sum(len(j) for j in lst2) else lst2", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n): \n        if n <= 1: \n            return False \n        if n == 2: \n            return True \n        if n % 2 == 0: \n            return False \n        i = 3 \n        while i * i <= n: \n            if n % i == 0: \n                return False \n            i += 2 \n        return True \n    primes = [i for i in range(2, a) if is_prime(i)] \n    for i in primes: \n        for j in primes: \n            for k in primes: \n                if i * j * k == a: \n                    return True \n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    import math; return True if x == 1 else False if n == 1 else x == n**round(math.log(x, n))", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "    return a == round(a ** (1. / 3)) ** 3", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    return sum(1 for digit in num if digit in '2357BD')", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    return \"db\" + bin(decimal)[2:] + \"db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    return ['A+' if g == 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 3.0 else 'B' if g > 2.7 else 'B-' if g > 2.3 else 'C+' if g > 2.0 else 'C' if g > 1.7 else 'C-' if g > 1.3 else 'D+' if g > 1.0 else 'D' if g > 0.7 else 'D-' if g > 0.0 else 'E' for g in grades]", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n): \n        if n <= 1: \n            return False \n        if n <= 3: \n            return True \n        if n % 2 == 0 or n % 3 == 0: \n            return False \n        i = 5 \n        while i * i <= n: \n            if n % i == 0 or n % (i + 2) == 0: \n                return False \n            i += 6 \n        return True \n    return is_prime(len(string))", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "    return sorted(array) if (array[0] + array[-1]) % 2 != 0 else sorted(array, reverse=True) if array else array", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "completion": "    return ''.join(chr((ord(char) - 97 + 4) % 26 + 97) if char.isalpha() else char for char in s)", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    lst.sort(); return lst[1] if len(lst) > 1 and lst[0] != lst[1] else None", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    return sum(1 for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence.strip().startswith('I'))", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "    return True if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and ((x == y + z) or (y == x + z) or (z == x + y))) else False", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    return ''.join([chr((ord(i) + 2 - 65) % 26 + 65) if i.isupper() else chr((ord(i) + 2 - 97) % 26 + 97) if i.islower() else i for i in message.swapcase() if i.isalpha() and i.lower() in 'aeiou' else i.swapcase() for i in message])", "result": "failed: invalid syntax (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n): \n        if n < 2: return False \n        for i in range(2, int(n**0.5) + 1): \n            if n % i == 0: return False \n        return True \n    primes = [i for i in lst if is_prime(i)] \n    if not primes: return 0 \n    largest_prime = max(primes) \n    return sum(int(digit) for digit in str(largest_prime))", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    return False if not dict else all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num): \n        if num < 2: return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: return False \n        return True \n    return [x for x in range(2, n) if is_prime(x)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    return (abs(a) % 10) * (abs(b) % 10)", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    return int(float(value)) if float(value) >= 0 else int(float(value)) - 1 if float(value) - int(float(value)) <= -0.5 else int(float(value))", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "completion": "    return [n + 2*i for i in range(n)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "    def words_string(s): return [word for word in s.replace(',', '').split()]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1): \n        if i % 2 == 0: \n            return i \n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m: return -1 \n    average = round((n + m) / 2) \n    return bin(average)", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    return sorted([i for i in x if all(int(d) % 2 != 0 for d in str(i))])", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    return [str(num) for num in sorted([i for i in arr if 1 <= i <= 9], reverse=True)].replace('1', 'One').replace('2', 'Two').replace('3', 'Three').replace('4', 'Four').replace('5', 'Five').replace('6', 'Six').replace('7', 'Seven').replace('8', 'Eight').replace('9', 'Nine')", "result": "failed: 'list' object has no attribute 'replace'", "passed": false}
{"task_id": "HumanEval/106", "completion": "    import math \n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    even_count, odd_count = 0, 0; for i in range(1, n+1): if str(i) == str(i)[::-1]: if i % 2 == 0: even_count += 1 else: odd_count += 1 return (even_count, odd_count)", "result": "failed: invalid syntax (<string>, line 25)", "passed": false}
{"task_id": "HumanEval/108", "completion": "    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "    return arr == sorted(arr) or arr.index(min(arr)) == 1 if len(arr) > 0 else True", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "    odd_nums_in_lst1 = [num for num in lst1 if num % 2 != 0] \n    even_nums_in_lst2 = [num for num in lst2 if num % 2 == 0] \n    if len(odd_nums_in_lst1) <= len(even_nums_in_lst2): \n        return \"YES\" \n    else: \n        return \"NO\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    from collections import Counter \n    test_list = test.split() \n    count_dict = Counter(test_list) \n    max_val = max(count_dict.values()) if count_dict else 0 \n    return {k: v for k, v in count_dict.items() if v == max_val}", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c]) \n    return (result, result == result[::-1])", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 for digit in string), sum(int(digit) % 2 for digit in string), sum(int(digit) % 2 for digit in string), sum(int(digit) % 2 for digit in string)) for string in lst]", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf') \n    for i in range(len(nums)): \n        for j in range(i, len(nums)): \n            min_sum = min(min_sum, sum(nums[i:j+1])) \n    return min_sum if min_sum != float('inf') else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    return math.ceil(sum([row.count(1) for row in grid]) / capacity)", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    import re \n    if not s: return [] \n    words = s.split() \n    vowels = 'aeiouAEIOU' \n    return [word for word in words if len([char for char in word if char not in vowels]) == n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = 'aeiouAEIOU' \n    word = word[::-1] \n    for i in range(1, len(word) - 1): \n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels: \n            return word[i] \n    return \"\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    str1, str2 = lst[0], lst[1] \n    if str1.count('(') >= str1.count(')') and str2.count(')') >= str2.count('('): \n        return 'Yes' \n    elif str1.count(')') >= str1.count('(') and str2.count('(') >= str2.count(')'): \n        return 'Yes' \n    else: \n        return 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr, reverse=True)[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    return sum([num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 != 0])", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum([x for x in arr[:k] if x < 100])", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = [n] \n    while n != 1: \n        if n % 2 == 0: \n            n = n // 2 \n        else: \n            n = 3 * n + 1 \n        collatz_sequence.append(n) \n    odd_collatz = [num for num in collatz_sequence if num % 2 != 0] \n    return sorted(odd_collatz)", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    import re \n    if not date: \n        return False \n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}$', date): \n        return False \n    month, day, year = map(int, date.split('-')) \n    if month < 1 or month > 12: \n        return False \n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31): \n        return False \n    if month in [4, 6, 9, 11] and (day < 1 or day > 30): \n        return False \n    if month == 2 and (day < 1 or day > 29): \n        return False \n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(lst) and len(lst) == len(set(lst))", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    return n > 1 and all(n % i for i in range(2, int(n**0.5) + 1)); start = max(interval1[0], interval2[0]); end = min(interval1[1], interval2[1]); if start > end: return \"NO\"; return \"YES\" if is_prime(end - start) else \"NO\"", "result": "failed: invalid syntax (<string>, line 22)", "passed": false}
{"task_id": "HumanEval/128", "completion": "    if not arr: return None \n    sign_product = 1 \n    magnitude_sum = 0 \n    for num in arr: \n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0) \n        magnitude_sum += abs(num) \n    return sign_product * magnitude_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    import heapq \n    n = len(grid) \n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] \n    visited = set() \n    heap = [(grid[0][0], 0, 0, [grid[0][0]])] \n    while heap: \n        val, x, y, path = heapq.heappop(heap) \n        if len(path) == k: n        return path \n        for dx, dy in directions: \n            nx, ny = x + dx, y + dy \n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: \n                visited.add((nx, ny)) \n                new_path = path + [grid[nx][ny]] heapq.heappush(heap, (new_path, nx, ny, new_path)) return []", "result": "failed: invalid syntax (<string>, line 39)", "passed": false}
{"task_id": "HumanEval/130", "completion": "    if n == 0: return [1] \n    if n == 1: return [1, 3] \n    tri_seq = [1, 3] \n    for i in range(2, n + 1): \n        if i % 2 == 0: \n            tri_seq.append(1 + i / 2) \n        else: \n            tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i - 3]) \n    return tri_seq", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1 \n    has_odd = False \n    for digit in str(n): \n        if int(digit) % 2 != 0: \n            product *= int(digit) \n            has_odd = True \n    return product if has_odd else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "    stack = []; for char in string: if char == '[': stack.append(char); elif char == ']' and stack: stack.pop(); else: return False; return len(stack) == 0 and '][' not in string", "result": "failed: invalid syntax (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/133", "completion": "    import math \n    return sum([math.ceil(i)**2 for i in lst])", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "    return True if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ') else False", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "    return -1 if all(arr[i] >= arr[i-1] for i in range(1, len(arr))) else next(i for i in range(1, len(arr)) if arr[i] < arr[i-1])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "    negatives = [i for i in lst if i < 0] positives = [i for i in lst if i > 0] a = max(negatives) if negatives else None b = min(positives) if positives else None return (a, b)", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/137", "completion": "    a = float(a.replace(',', '.')) if isinstance(a, str) else a; b = float(b.replace(',', '.')) if isinstance(b, str) else b; if a > b: return str(a).replace('.', ',') if ',' in str(a) else a; elif b > a: return str(b).replace('.', ',') if ',' in str(b) else b; else: return None", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/138", "completion": "    return n >= 8 and n % 2 == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "    def factorial(num): \n        if num == 0 or num == 1: \n            return 1 \n        else: \n            return num * factorial(num - 1) \n    result = 1 \n    for i in range(1, n + 1): \n        result *= factorial(i) \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    import re; return re.sub(' {3,}', '-', text.replace(' ', '_'))", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    import re \n    if len(re.findall('\\d', file_name)) > 3: return 'No' \n    if file_name.count('.') != 1: return 'No' \n    name, ext = file_name.split('.') \n    if not name or not name[0].isalpha(): return 'No' \n    if ext not in ['txt', 'exe', 'dll']: return 'No' \n    return 'Yes'", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "    return sum([val**2 if i%3==0 else val**3 if i%4==0 else val for i, val in enumerate(lst)])", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n): return all([(n%j) for j in range(2, int(n**0.5)+1)]) and n>1; def words_in_sentence(sentence): return ' '.join([word for word in sentence.split() if is_prime(len(word))])", "result": "failed: invalid syntax (<string>, line 22)", "passed": false}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/')); n_num, n_den = map(int, n.split('/')); return (x_num * n_num) % (x_den * n_den) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    return len([num for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579'])", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)] \n    count = 0 \n    for i in range(n): \n        for j in range(i + 1, n): \n            for k in range(j + 1, n): \n                if (a[i] + a[j] + a[k]) % 3 == 0: \n                    count += 1 \n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] \n    if planet1 not in planets or planet2 not in planets: return () \n    index1, index2 = planets.index(planet1), planets.index(planet2) \n    if index1 < index2: return tuple(planets[index1+1:index2]) \n    else: return tuple(planets[index2+1:index1])", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    def is_prime(n): \n        if n <= 1 or (n % 2 == 0 and n > 2): \n            return False \n        return all(n % i for i in range(3, int(n**0.5) + 1, 2)) \n    return x if is_prime(n) else y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)): b = b[1:] + b[0]; if b in a: return True; return False", "result": "failed: invalid syntax (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/155", "completion": "    num = abs(num) \n    digits = [int(d) for d in str(num)] \n    even_count = sum(1 for d in digits if d % 2 == 0) \n    odd_count = sum(1 for d in digits if d % 2 != 0) \n    return even_count, odd_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'} \n    result = '' \n    for key in sorted(roman_numerals.keys(), reverse=True): \n        while number >= key: \n            result += roman_numerals[key] \n            number -= key \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    return True if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2 else False", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    return min((word for word in words if len(set(word)) == max(len(set(word)) for word in words)), key=str.lower)", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    return [number + min(need, remaining), max(0, remaining - need)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    expression = str(operand[0]) \n    for i in range(1, len(operand)): \n        expression += operator[i-1] + str(operand[i]) \n    return eval(expression)", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    return ''.join([i.lower() if i.isupper() else i.upper() for i in s]) if any(i.isalpha() for i in s) else s[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    import hashlib \n    if not text: return None \n    return hashlib.md5(text.encode()).hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    return sorted([i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0])", "result": "failed: Test 1", "passed": false}
