{"task_id": "HumanEval/0", "completion": "    return any(abs(numbers[i] - numbers[j]) < threshold for i in range(len(numbers)) for j in range(i+1, len(numbers)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    return [group.replace(' ', '') for group in paren_string.split(') (') if group]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    return any(sum(operations[:i+1]) < 0 for i in range(len(operations)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    return sum(abs(x - sum(numbers) / len(numbers)) for x in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    return [i for num in numbers for i in (num, delimeter)][:-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    return [max(paren_string[i:i+paren_string[i:].index(' ')+1].count('(') for i in range(len(paren_string)) if paren_string[i] == '(') if ' ' in paren_string else paren_string.count('(')]", "result": "failed: substring not found", "passed": false}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    return sum(numbers) if numbers else 0, eval('*'.join(map(str, numbers))) if numbers else 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    return [max(numbers[:i+1]) for i in range(len(numbers))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "    return string + string[-2::-1] if string == string[::-1] else string + string[-2::-1] + string[-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "    return ''.join('1' if i != j else '0' for i, j in zip(a, b))", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    return max(strings, key=len, default=None) if strings else None", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b != 0: a, b = b, a % b; return a", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    return sum(1 for i in range(len(string)) if string.startswith(substring, i))", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    return ' '.join(sorted(numbers.split(), key=lambda x: ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(x)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    return min(((numbers[i], numbers[j]) for i in range(len(numbers)) for j in range(i+1, len(numbers))), key=lambda x: abs(x[0]-x[1]))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/21", "completion": "    return [(num - min(numbers)) / (max(numbers) - min(numbers)) for num in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    return max(i for i in range(1, n) if n % i == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    return [i for i in range(2, n + 1) if n % i == 0 while n != 1: while n % i == 0: n /= i; yield i]", "result": "failed: invalid syntax (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/26", "completion": "    return [num for i, num in enumerate(numbers) if numbers.index(num) == i]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    return all([(n%j) for j in range(2, int(n**0.5)+1)]) and n>1", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    assert len(xs) % 2 == 0, \"xs must have even number of coefficients\" \n    assert xs[-1] != 0, \"largest coefficient must be non-zero\" \n    low, high = -100.0, 100.0 \n    while high - low > 1e-6: \n    mid = (low + high) / 2 \n        if poly(xs, mid) > 0: \n        high = mid \n        else: low = mid \n    return (low + high) / 2", "result": "failed: expected an indented block (<string>, line 28)", "passed": false}
{"task_id": "HumanEval/33", "completion": "    return [x for _, x in sorted(enumerate(l), key=lambda x: (x[0] % 3 == 0, x[1]))]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] \n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups] \n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    return [x for x in (lambda n: [x for x in (lambda n: [x for x in (lambda n: [((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda y: f(lambda x: y(y)(x))))(lambda f: (lambda x: x(x))(lambda y: f(lambda n: 1 if n <= 2 else y(n-1) + y(n-2))))(i) for i in range(2, n+1)])(n) if ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda y: f(lambda x: y(y)(x))))(lambda f: (lambda x: x(x))(lambda y: f(lambda n: all(n%i for i in range(2, int(n**0.5)+1)) if n > 1 else False)))(x)])(n) if x in (lambda n: [((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda y: f(lambda x: y(y)(x))))(lambda f: (lambda x: x(x))(lambda y: f(lambda n: 1 if n <= 2 else y(n-1) + y(n-2))))(i) for i in range(2, n+1)])(n)][n-1]", "result": "failed: invalid syntax (<string>, line 17)", "passed": false}
{"task_id": "HumanEval/40", "completion": "    return any(sum(comb) == 0 for comb in itertools.combinations(l, 3))", "result": "failed: name 'itertools' is not defined", "passed": false}
{"task_id": "HumanEval/41", "completion": "    return n**2", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    return any(-i in l for i in l if i != 0) or l.count(0) > 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    return ''.join(str((x // base**i) % base) for i in range(int(math.log(x, base)), -1, -1))", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0; [((a, b, c, d), (b, c, d, a + b + c + d))[i > 3] for i in range(n+1)]; return a", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "completion": "    return sorted(l)[len(l) // 2] if len(l) % 2 else sum(sorted(l)[len(l) // 2 - 1:len(l) // 2 + 1]) / 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    return ''.join(char for char in text if char.lower() not in 'aeiou')", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(i < t for i in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return set(s0) == set(s1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "completion": "    return n if n <= 1 else fib(n-1) + fib(n-2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    return brackets.count(\"<\") == brackets.count(\">\")", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/57", "completion": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    i = 2; while i * i <= n: if n % i: i += 1 else: n //= i; return n", "result": "failed: invalid syntax (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    return brackets.count(\"(\") == brackets.count(\")\")", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/62", "completion": "    return [i*xs[i] for i in range(1, len(xs))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    a, b, c = 0, 0, 1; [((a, b, c), (b, c, a + b + c))[i > 2] for i in range(n+1)]; return a", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/64", "completion": "    return sum(1 for char in s if char.lower() in 'aeiou') + (s[-1].lower() == 'y')", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "    return str(x)[-shift:] + str(x)[:-shift] if shift <= len(str(x)) else str(x)[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    return n - int(s.split()[0]) - int(s.split()[3])", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "    return [min((v, i) for i, v in enumerate(arr) if v % 2 == 0)] if any(v % 2 == 0 for v in arr) else []", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "completion": "    return max([num for num in set(lst) if lst.count(num) >= num], default=-1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    return [sorted(lst)[i//2] if i%2==0 else sorted(lst, reverse=True)[i//2] for i in range(len(lst))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    return round(((s:=(a+b+c)/2)*(s-a)*(s-b)*(s-c))**0.5, 2) if a+b>c and a+c>b and b+c>a else -1", "result": "failed: invalid syntax (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    return sum(arr[i] != arr[-i-1] for i in range(len(arr)//2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    return lst1 if sum(len(i) for i in lst1) <= sum(len(j) for j in lst2) else lst2", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    return any(a == i * j * k for i in range(2, a) for j in range(i, a) for k in range(j, a) if all(a % n != 0 for n in range(2, a) if a != n for a in [i, j, k]))", "result": "failed: local variable 'a' referenced before assignment", "passed": false}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(round(x**(1/n)))", "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "    return True if round(a ** (1. / 3)) ** 3 == a else False", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    return sum(1 for digit in num if digit in '2357BD')", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    return \"db\" + bin(decimal)[2:] + \"db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    return all(len(set(s[i:i+3])) == 3 for i in range(len(s)-2)) if len(s) >= 3 else False", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    return ['A+' if g == 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 3.0 else 'B' if g > 2.7 else 'B-' if g > 2.3 else 'C+' if g > 2.0 else 'C' if g > 1.7 else 'C-' if g > 1.3 else 'D+' if g > 1.0 else 'D' if g > 0.7 else 'D-' if g > 0.0 else 'E' for g in grades]", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    return all(string.__len__() % i for i in range(2, string.__len__())) and string.__len__() > 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    return 2 * 10 ** (n - 1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    return bin(sum(int(i) for i in bin(N)[2:]))[2:]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "    return sorted(array) if (array[0] + array[-1]) % 2 else sorted(array, reverse=True) if array else array", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "completion": "    return ''.join(chr((ord(char) - 97 + 4) % 26 + 97) if char.isalpha() else char for char in s)", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    return None if len(set(lst)) < 2 else sorted(set(lst))[1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    return sum(1 for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence.strip().startswith('I'))", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "    return all(isinstance(i, int) for i in [x, y, z]) and (x == y + z or y == x + z or z == x + y)", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    return ''.join([chr((ord(i) + 2 - 65) % 26 + 65) if i.isupper() else chr((ord(i) + 2 - 97) % 26 + 97) if i.islower() else i for i in message.swapcase()])", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    return sum(int(i) for i in str(max(i for i in lst if all(i % j for j in range(2, int(i**0.5) + 1)) and i > 1)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    return False if not dict else all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "completion": "    return [i for i in range(2, n) if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "    return [n + 2 * i for i in range(n)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "    return [word.strip() for word in s.replace(',', ' ').split()]", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    return max([i for i in range(x, y+1) if i%2 == 0], default=-1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    return -1 if n > m else bin(round(sum(range(n, m+1)) / (m-n+1)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    return sorted([i for i in x if all(int(d) % 2 != 0 for d in str(i))])", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    return [str(i) for i in sorted([n for n in arr if 1 <= n <= 9], reverse=True)].replace('1', 'One').replace('2', 'Two').replace('3', 'Three').replace('4', 'Four').replace('5', 'Five').replace('6', 'Six').replace('7', 'Seven').replace('8', 'Eight').replace('9', 'Nine')", "result": "failed: 'list' object has no attribute 'replace'", "passed": false}
{"task_id": "HumanEval/106", "completion": "    return [1 if i == 0 else i * f(i - 1) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(n)]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/107", "completion": "    return (len([i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0]), len([i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    return sum(1 for num in arr if sum(int(digit) for digit in str(num) if digit.isdigit()) > 0)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "    return arr == sorted(arr) or arr.index(min(arr)) == 1 and arr[0] > arr[-1]", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "    return \"YES\" if all(i % 2 == 0 for i in lst1 + [j for j in lst2 if j % 2 == 0]) else \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "    return {char: test.count(char) for char in set(test.split()) if test.count(char) == max(test.count(c) for c in set(test.split()))}", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    return (''.join([i for i in s if i not in c]), ''.join([i for i in s if i not in c]) == ''.join([i for i in s if i not in c])[::-1])", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum(int(i)%2 for i in s), sum(int(i)%2 for i in s), sum(int(i)%2 for i in s), sum(int(i)%2 for i in s)) for s in lst]", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    return min(sum(nums[i:j+1]) for i in range(len(nums)) for j in range(i, len(nums)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    return sum(math.ceil(sum(row) / capacity) for row in grid)", "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    return [word for word in s.split() if sum(letter.lower() not in 'aeiou' for letter in word) == n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    return '' if not word or len(word) < 3 else next((word[i] for i in range(len(word) - 2, 0, -1) if word[i] in 'aeiouAEIOU' and word[i - 1] not in 'aeiouAEIOU' and word[i + 1] not in 'aeiouAEIOU'), '')", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    return 'Yes' if lst[0].count('(') >= lst[0].count(')') and lst[1].count(')') >= lst[1].count('(') or lst[1].count('(') >= lst[1].count(')') and lst[0].count(')') >= lst[0].count('(') else 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr, reverse=True)[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum([x for x in arr[:k] if len(str(abs(x))) <= 2])", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    return sorted([i for i in (lambda f, n: (lambda x: x(x))(lambda y: f(lambda *xs: y(y)(*xs))))(lambda f: lambda x: [x] + (f(x // 2) if x % 2 == 0 else f(3 * x + 1)) if x != 1 else [1], n) if i % 2 != 0])", "result": "failed: 'function' object is not iterable", "passed": false}
{"task_id": "HumanEval/124", "completion": "    return all([bool(re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date)), 1 <= int(date.split('-')[0]) <= 12, 1 <= int(date.split('-')[1]) <= (31 if int(date.split('-')[0]) in [1,3,5,7,8,10,12] else 30 if int(date.split('-')[0]) in [4,6,9,11] else 29)])", "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/125", "completion": "    return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(lst) and len(lst) == len(set(lst))", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    start, end = max(interval1[0], interval2[0]), min(interval1[1], interval2[1]); length = max(0, end - start); return \"YES\" if length > 1 and all(length % i for i in range(2, int(length**0.5) + 1)) else \"NO\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "completion": "    return None if not arr else sum(abs(i) for i in arr) * (1 if sum(1 for i in arr if i > 0) % 2 == 0 else -1) if all(i != 0 for i in arr) else 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "completion": "    return sorted([grid[i//len(grid)][i%len(grid)] for i in range(len(grid)*len(grid))])[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "    return [3 if i == 1 else 1 + i / 2 if i % 2 == 0 else tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(n + 1)]", "result": "failed: maximum recursion depth exceeded while calling a Python object", "passed": false}
{"task_id": "HumanEval/131", "completion": "    return 0 if all(int(i) % 2 == 0 for i in str(n)) else eval('*'.join(i for i in str(n) if int(i) % 2 != 0))", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "    return any(string[i:i+2] == '[[' and string[i+2:i+4] == ']]' for i in range(len(string)-3))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "    return sum([int(i)**2 for i in map(lambda x: x if x>0 else x-1, map(abs, lst))])", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "completion": "    return True if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \") else False", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "    return -1 if all(arr[i] >= arr[i-1] for i in range(1, len(arr))) else next(i for i in range(1, len(arr)) if arr[i] < arr[i-1])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "    return (max(i for i in lst if i < 0) if any(i < 0 for i in lst) else None, min(i for i in lst if i > 0) if any(i > 0 for i in lst) else None)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    return max(a, b, key=lambda x: float(str(x).replace(',', '.'))) if a != b else None", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "    return n >= 8 and n % 2 == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "    return 1 if n==0 else n * special_factorial(n-1) * special_factorial(n-2) if n>1 else n * special_factorial(n-1)", "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/140", "completion": "    return '_'.join('-' if len(word) == 0 else word for word in text.split(' '))", "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    return 'Yes' if (file_name.count('.') == 1 and len([ch for ch in file_name if ch.isdigit()]) <= 3 and file_name.split('.')[0] and file_name.split('.')[0][0].isalpha() and file_name.split('.')[1] in ['txt', 'exe', 'dll']) else 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "    return sum([x**2 if i%3==0 else x**3 if i%4==0 else x for i,x in enumerate(lst)])", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "    return ' '.join([word for word in sentence.split() if len(word) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]])", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    return (lambda a, b: a * b == round(a * b))((lambda x: int(x[0]) / int(x[1]))(x.split('/')), (lambda n: int(n[0]) / int(n[1]))(n.split('/')))", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    return len([num for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579'])", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    return sum(1 for i in range(1, n+1) for j in range(i+1, n+1) for k in range(j+1, n+1) if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    return tuple([planet for planet in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'][min(['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'].index(planet1), ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'].index(planet2))+1:max(['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'].index(planet1), ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'].index(planet2))]]) if planet1 in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'] and planet2 in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'] else ()", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    return x if all(n%i for i in range(2, int(n**0.5)+1)) and n>1 else y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(a-b) if a!=b else 0 for a, b in zip(game, guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    return f\"{class_name}.{max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    return any((b[i:] + b[:i]) in a for i in range(len(b)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    return sum(int(digit) % 2 == 0 for digit in str(abs(num))), sum(int(digit) % 2 != 0 for digit in str(abs(num)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    return ''.join(str(number // val * rom) + (int_to_mini_roman(number % val) if number % val else '') for val, rom in [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]) if number >= val)", "result": "failed: invalid syntax (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/157", "completion": "    return True if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2 else False", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    return min((word for word in words if len(set(word)) == max(len(set(word)) for word in words)), key=str.lower)", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    return [number + min(need, remaining), max(0, remaining - need)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    return eval(' '.join(str(x) for x in sum(list(zip(operand, operator + [''])), ())))", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    return \"\".join([i.lower() if i.isupper() else i.upper() for i in s]) if any(i.isalpha() for i in s) else s[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    import hashlib \n    return hashlib.md5(text.encode()).hexdigest() if text else None", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "result": "failed: Test 1", "passed": false}
