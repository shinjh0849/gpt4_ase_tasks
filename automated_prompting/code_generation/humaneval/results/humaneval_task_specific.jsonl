{"task_id": "HumanEval/0", "completion": "return any(abs(numbers[i] - numbers[j]) < threshold for i in range(len(numbers)) for j in range(i+1, len(numbers)))"}
{"task_id": "HumanEval/1", "completion": "from typing import List \\nparen_string = paren_string.replace(' ', '') \\nresult = [] \\nstack = [] \\nstart = 0 \\nfor i, char in enumerate(paren_string): \\n\\tif char == '(': \\n\\t\\tif not stack: \\n\\t\\t\\tstart = i \\n\\t\\tstack.append(char) \\n\\telif char == ')': \\n\\t\\tstack.pop() \\n\\t\\tif not stack: \\n\\t\\t\\tresult.append(paren_string[start:i+1]) \\nreturn result"}
{"task_id": "HumanEval/2", "completion": "return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "balance = 0 \\nfor operation in operations: \\n\\tbalance += operation \\n\\tif balance < 0: \\n\\treturn True \\nreturn False"}
{"task_id": "HumanEval/4", "completion": "mean = sum(numbers) / len(numbers); return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "return [element for sublist in [[num, delimeter] for num in numbers] for element in sublist][:-1] if numbers else []"}
{"task_id": "HumanEval/6", "completion": "from typing import List \\nresult = [] \\nfor group in paren_string.split(): \\n\\tdepth = max_depth = 0 \\n\\tfor char in group: \\n\\t\\tif char == '(': \\n\\t\\t\\tdepth += 1 \\n\\t\\t\\tmax_depth = max(max_depth, depth) \\n\\t\\telif char == ')': \\n\\t\\t\\tdepth -= 1 \\n\\tresult.append(max_depth) \\nreturn result"}
{"task_id": "HumanEval/7", "completion": "return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from functools import reduce \\nreturn (sum(numbers), reduce(lambda x, y: x * y, numbers, 1)) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "max_so_far = -float('inf'); result = [] \\nfor num in numbers: \\n\\tif num > max_so_far: \\n\\t\\tmax_so_far = num \\n\\tresult.append(max_so_far) \\nreturn result"}
{"task_id": "HumanEval/10", "completion": "if string == string[::-1]: return string \\nfor i in range(len(string), -1, -1): \\n\\tif string[:i] == string[:i][::-1]: \\n\\t\\treturn string + string[i:][::-1]"}
{"task_id": "HumanEval/11", "completion": "return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])"}
{"task_id": "HumanEval/12", "completion": "if not strings: return None else: return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "while b != 0: a, b = b, a % b return a"}
{"task_id": "HumanEval/14", "completion": "return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "notes = music_string.split() \\nbeats = [] \\nfor note in notes: \\n\\tif note == 'o': \\n\\t\\tbeats.append(4) \\n\\telif note == 'o|': \\n\\t\\tbeats.append(2) \\n\\telif note == '.|': \\n\\t\\tbeats.append(1) \\nreturn beats"}
{"task_id": "HumanEval/18", "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"task_id": "HumanEval/19", "completion": "number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}; numbers_list = numbers.split(); numbers_list.sort(key=lambda x: number_dict[x]); return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "numbers.sort() min_diff = float('inf') closest_pair = None for i in range(len(numbers)-1): diff = numbers[i+1] - numbers[i] if diff < min_diff: min_diff = diff closest_pair = (numbers[i], numbers[i+1]) return closest_pair"}
{"task_id": "HumanEval/21", "completion": "min_num = min(numbers); max_num = max(numbers); return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "return len(string)"}
{"task_id": "HumanEval/24", "completion": "for i in range(n-1, 0, -1): if n % i == 0: return i"}
{"task_id": "HumanEval/25", "completion": "factors = [] \\ni = 2 \\nwhile i * i <= n: \\n\\tif n % i: \\n\\t\\ti += 1 \\n\\telse: \\n\\t\\tn //= i \\n\\t\\tfactors.append(i) \\nif n > 1: \\n\\tfactors.append(n) \\nreturn factors"}
{"task_id": "HumanEval/26", "completion": "return [num for i, num in enumerate(numbers) if numbers.index(num) == i]"}
{"task_id": "HumanEval/27", "completion": "return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "if n <= 1: return False \\nfor i in range(2, int(n**0.5) + 1): \\n\\tif n % i == 0: return False \\nreturn True"}
{"task_id": "HumanEval/32", "completion": "import numpy as np \\nroots = np.roots(xs) \\nreal_roots = [root.real for root in roots if root.imag == 0] \\nreturn min(real_roots, key=abs) if real_roots else None"}
{"task_id": "HumanEval/33", "completion": "indices_divisible_by_three = [l[i] for i in range(0, len(l), 3)] \\nindices_divisible_by_three.sort() \\nfor i in range(0, len(l), 3): \\n\\tl[i] = indices_divisible_by_three[i // 3] \\nreturn l"}
{"task_id": "HumanEval/34", "completion": "return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "return max(l)"}
{"task_id": "HumanEval/36", "completion": "return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "return [l[i] if i % 2 != 0 else sorted(l[::2])[i//2] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "groups = [s[(3 * i):min((3 * i + 3), len(s))] \\nfor i in range((len(s) + 2) // 3)] \\ngroups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups] \\nreturn \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num): \\n\\tif num < 2: \\n\\t\\t\\return False \\n\\t\\tfor i in range(2, int(num**0.5) + 1): \\n\\t\\t\\tif num % i == 0: \\n\\t\\t\\t\\treturn False \\n\\treturn True \\ndef fib(): \\n\\ta, b = 0, 1 \\n\\t\\twhile True: \\n\\t\\t\\tyield a \\n\\t\\t\\ta, b = b, a + b \\ncount = 0 \\nfor num in fib(): \\n\\tif is_prime(num): \\n\\t\\tcount += 1 \\n\\t\\tif count == n: \\n\\t\\t\\treturn num"}
{"task_id": "HumanEval/40", "completion": "from itertools import combinations \\nfor triple in combinations(l, 3): \\n\\tif sum(triple) == 0: \\n\\t\\treturn True \\nreturn False"}
{"task_id": "HumanEval/41", "completion": "return n**2"}
{"task_id": "HumanEval/42", "completion": "return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "return any(-i in l for i in l if i != 0) or l.count(0) > 1"}
{"task_id": "HumanEval/44", "completion": "if x == 0: \\n\\treturn '0' \\ndigits = [] \\nwhile x: \\n\\tdigits.append(str(x % base)) \\n\\tx //= base \\ndigits.reverse() \\nreturn ''.join(digits)"}
{"task_id": "HumanEval/45", "completion": "return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "if n == 0: return 0 \\nif n == 1: return 0 \\nif n == 2: return 2 \\nif n == 3: return 0 \\nfib4 = [0, 0, 2, 0] + [0] * (n - 3) \\nfor i in range(4, n + 1): fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4] \\nreturn fib4[n]"}
{"task_id": "HumanEval/47", "completion": "l.sort() \\nlength = len(l) \\nif length % 2 == 0: \\n\\treturn (l[length // 2] + l[length // 2 - 1]) / 2 \\nelse: \\n\\treturn l[length // 2]"}
{"task_id": "HumanEval/48", "completion": "return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "return ''.join(char for char in text if char.lower() not in 'aeiou')"}
{"task_id": "HumanEval/52", "completion": "return all(i < t for i in l)"}
{"task_id": "HumanEval/53", "completion": "return x + y"}
{"task_id": "HumanEval/54", "completion": "return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "a, b = 0, 1 \\nfor _ in range(n): \\n\\ta, b = b, a + b \\nreturn a"}
{"task_id": "HumanEval/56", "completion": "bracket_stack = [] \\nfor bracket in brackets: \\n\\tif bracket == '<': \\n\\t\\tbracket_stack.append(bracket) \\n\\telif bracket == '>': \\n\\t\\tif not bracket_stack: \\n\\t\\t\\treturn False n\\t\\tbracket_stack.pop() \\nreturn not bracket_stack"}
{"task_id": "HumanEval/57", "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"task_id": "HumanEval/58", "completion": "return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "i = 2 \\nwhile i * i <= n: \\n\\tif n % i: n\\t\\ti += 1 \\n\\telse: \\n\\t\\tn //= i \\nreturn n"}
{"task_id": "HumanEval/60", "completion": "return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "return brackets.count(\"(\") == brackets.count(\")\") and brackets.find(\")\") > brackets.find(\"(\")"}
{"task_id": "HumanEval/62", "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "if n == 0: return 0 \\nelif n == 1: return 0 \\nelif n == 2: return 1 \\nelse: \\n\\ta, b, c = 0, 0, 1 \\n\\tfor _ in range(3, n+1): \\n\\t\\ta, b, c = b, c, a+b+c \\n\\treturn c"}
{"task_id": "HumanEval/64", "completion": "return sum(1 for char in s if char.lower() in 'aeiou') + (1 if s[-1].lower() == 'y' else 0)"}
{"task_id": "HumanEval/65", "completion": "x_str = str(x) \\nif shift > len(x_str): \\n\\treturn x_str[::-1] \\n\\telse: \\n\\t\\treturn x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "return n - sum(int(i) for i in s.split() if i.isdigit())"}
{"task_id": "HumanEval/68", "completion": "smallest_even = float('inf') \\nsmallest_index = -1 \\nfor i, num in enumerate(arr): \\n\\tif num % 2 == 0 and num < smallest_even: \\n\\t\\tsmallest_even = num \\n\\t\\tsmallest_index = i \\nreturn [smallest_even, smallest_index] if smallest_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter \\ncount = Counter(lst) \\nresult = -1 \\nfor num, freq in count.items(): \\n\\tif num <= freq and num > result: \\n\\t\\tresult = num \\nreturn result"}
{"task_id": "HumanEval/70", "completion": "lst.sort() \\nresult = [] \\nwhile lst: \\n\\tresult.append(lst.pop(0)) \\n\\tif lst: \\n\\t\\tresult.append(lst.pop()) \\nreturn result"}
{"task_id": "HumanEval/71", "completion": "import math \\nif a + b > c and a + c > b and b + c > a: \\n\\ts = (a + b + c) / 2 \\n\\tarea = math.sqrt(s * (s - a) * (s - b) * (s - c)) \\n\\treturn round(area, 2) \\nelse: \\n\\treturn -1"}
{"task_id": "HumanEval/72", "completion": "return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "return sum(arr[i] != arr[-i-1] for i in range(len(arr)//2))"}
{"task_id": "HumanEval/74", "completion": "return lst1 if sum(len(i) for i in lst1) <= sum(len(j) for j in lst2) else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n): \\n\\tif n <= 1: \\n\\t\\treturn False \\n\\tif n == 2: \\n\\t\\treturn True \\n\\tif n % 2 == 0: \\n\\t\\treturn False \\n\\ti = 3 \\n\\twhile i * i <= n: \\n\\t\\tif n % i == 0: \\n\\t\\t\\treturn False \\n\\t\\ti += 2 \\n\\treturn True \\nprimes = [i for i in range(2, a) if is_prime(i)] \\nfor i in primes: \\n\\tfor j in primes: \\n\\t\\tfor k in primes: \\n\\t\\t\\tif i * j * k == a: \\n\\t\\t\\t\\treturn True \\nreturn False"}
{"task_id": "HumanEval/76", "completion": "import math; return True if x == 1 else False if n == 1 else x == n**round(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "return a == round(a ** (1. / 3)) ** 3"}
{"task_id": "HumanEval/78", "completion": "return sum(1 for digit in num if digit in '2357BD')"}
{"task_id": "HumanEval/79", "completion": "return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False"}
{"task_id": "HumanEval/81", "completion": "return ['A+' if g == 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 3.0 else 'B' if g > 2.7 else 'B-' if g > 2.3 else 'C+' if g > 2.0 else 'C' if g > 1.7 else 'C-' if g > 1.3 else 'D+' if g > 1.0 else 'D' if g > 0.7 else 'D-' if g > 0.0 else 'E' for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n): \\n\\tif n <= 1: \\n\\t\\treturn False \\n\\tif n <= 3: \\n\\t\\treturn True \\n\\tif n % 2 == 0 or n % 3 == 0: \\n\\t\\treturn False \\n\\ti = 5 \\n\\twhile i * i <= n: \\n\\t\\tif n % i == 0 or n % (i + 2) == 0: \\n\\t\\t\\treturn False \\n\\t\\ti += 6 \\n\\treturn True \\nreturn is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "return 2 * 10 ** (n - 1) - 10 ** (n - 2)"}
{"task_id": "HumanEval/84", "completion": "return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]"}
{"task_id": "HumanEval/85", "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])"}
{"task_id": "HumanEval/86", "completion": "return ' '.join([''.join(sorted(word)) for word in s.split(' ')])"}
{"task_id": "HumanEval/87", "completion": "return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "return sorted(array) if (array[0] + array[-1]) % 2 != 0 else sorted(array, reverse=True) if array else array"}
{"task_id": "HumanEval/89", "completion": "return ''.join(chr((ord(char) - 97 + 4) % 26 + 97) if char.isalpha() else char for char in s)"}
{"task_id": "HumanEval/90", "completion": "lst.sort(); return lst[1] if len(lst) > 1 and lst[0] != lst[1] else None"}
{"task_id": "HumanEval/91", "completion": "return sum(1 for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence.strip().startswith('I'))"}
{"task_id": "HumanEval/92", "completion": "return True if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and ((x == y + z) or (y == x + z) or (z == x + y))) else False"}
{"task_id": "HumanEval/93", "completion": "return ''.join([chr((ord(i) + 2 - 65) % 26 + 65) if i.isupper() else chr((ord(i) + 2 - 97) % 26 + 97) if i.islower() else i for i in message.swapcase() if i.isalpha() and i.lower() in 'aeiou' else i.swapcase() for i in message])"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n): \\n\\tif n < 2: return False \\n\\tfor i in range(2, int(n**0.5) + 1): \\n\\t\\tif n % i == 0: return False \\n\\treturn True \\nprimes = [i for i in lst if is_prime(i)] \\nif not primes: return 0 \\nlargest_prime = max(primes) \\nreturn sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "return False if not dict else all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num): \\n\\tif num < 2: return False \\n\\tfor i in range(2, int(num**0.5) + 1): \\n\\t\\tif num % i == 0: return False \\n\\treturn True \\nreturn [x for x in range(2, n) if is_prime(x)]"}
{"task_id": "HumanEval/97", "completion": "return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')"}
{"task_id": "HumanEval/99", "completion": "return int(float(value)) if float(value) >= 0 else int(float(value)) - 1 if float(value) - int(float(value)) <= -0.5 else int(float(value))"}
{"task_id": "HumanEval/100", "completion": "return [n + 2*i for i in range(n)]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s): return [word for word in s.replace(',', '').split()]"}
{"task_id": "HumanEval/102", "completion": "for i in range(y, x-1, -1): \\n\\tif i % 2 == 0: \\n\\t\\treturn i \\nreturn -1"}
{"task_id": "HumanEval/103", "completion": "if n > m: return -1 \\naverage = round((n + m) / 2) \\nreturn bin(average)"}
{"task_id": "HumanEval/104", "completion": "return sorted([i for i in x if all(int(d) % 2 != 0 for d in str(i))])"}
{"task_id": "HumanEval/105", "completion": "return [str(num) for num in sorted([i for i in arr if 1 <= i <= 9], reverse=True)].replace('1', 'One').replace('2', 'Two').replace('3', 'Three').replace('4', 'Four').replace('5', 'Five').replace('6', 'Six').replace('7', 'Seven').replace('8', 'Eight').replace('9', 'Nine')"}
{"task_id": "HumanEval/106", "completion": "import math \\nreturn [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "even_count, odd_count = 0, 0; for i in range(1, n+1): if str(i) == str(i)[::-1]: if i % 2 == 0: even_count += 1 else: odd_count += 1 return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)"}
{"task_id": "HumanEval/109", "completion": "return arr == sorted(arr) or arr.index(min(arr)) == 1 if len(arr) > 0 else True"}
{"task_id": "HumanEval/110", "completion": "odd_nums_in_lst1 = [num for num in lst1 if num % 2 != 0] \\neven_nums_in_lst2 = [num for num in lst2 if num % 2 == 0] \\nif len(odd_nums_in_lst1) <= len(even_nums_in_lst2): \\n\\treturn \"YES\" \\nelse: \\n\\treturn \"NO\""}
{"task_id": "HumanEval/111", "completion": "from collections import Counter \\ntest_list = test.split() \\ncount_dict = Counter(test_list) \\nmax_val = max(count_dict.values()) if count_dict else 0 \\nreturn {k: v for k, v in count_dict.items() if v == max_val}"}
{"task_id": "HumanEval/112", "completion": "result = ''.join([i for i in s if i not in c]) \\nreturn (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 for digit in string), sum(int(digit) % 2 for digit in string), sum(int(digit) % 2 for digit in string), sum(int(digit) % 2 for digit in string)) for string in lst]"}
{"task_id": "HumanEval/114", "completion": "min_sum = float('inf') \\nfor i in range(len(nums)): \\n\\tfor j in range(i, len(nums)): \\n\\t\\tmin_sum = min(min_sum, sum(nums[i:j+1])) \\nreturn min_sum if min_sum != float('inf') else 0"}
{"task_id": "HumanEval/115", "completion": "return math.ceil(sum([row.count(1) for row in grid]) / capacity)"}
{"task_id": "HumanEval/116", "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "import re \\nif not s: return [] \\nwords = s.split() \\nvowels = 'aeiouAEIOU' \\nreturn [word for word in words if len([char for char in word if char not in vowels]) == n]"}
{"task_id": "HumanEval/118", "completion": "vowels = 'aeiouAEIOU' \\nword = word[::-1] \\nfor i in range(1, len(word) - 1): \\n\\tif word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels: \\n\\t\\treturn word[i] \\nreturn \"\""}
{"task_id": "HumanEval/119", "completion": "str1, str2 = lst[0], lst[1] \\nif str1.count('(') >= str1.count(')') and str2.count(')') >= str2.count('('): \\n\\treturn 'Yes' \\nelif str1.count(')') >= str1.count('(') and str2.count('(') >= str2.count(')'): \\n\\treturn 'Yes' \\nelse: \\n\\treturn 'No'"}
{"task_id": "HumanEval/120", "completion": "return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "return sum([num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 != 0])"}
{"task_id": "HumanEval/122", "completion": "return sum([x for x in arr[:k] if x < 100])"}
{"task_id": "HumanEval/123", "completion": "collatz_sequence = [n] \\nwhile n != 1: \\n\\tif n % 2 == 0: \\n\\t\\tn = n // 2 \\n\\telse: \\n\\t\\tn = 3 * n + 1 \\n\\tcollatz_sequence.append(n) \\nodd_collatz = [num for num in collatz_sequence if num % 2 != 0] \\nreturn sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "import re \\nif not date: \\n\\treturn False \\nif not re.match(r'\\d{2}-\\d{2}-\\d{4}$', date): \\n\\treturn False \\nmonth, day, year = map(int, date.split('-')) \\nif month < 1 or month > 12: \\n\\treturn False \\nif month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31): \\n\\treturn False \\nif month in [4, 6, 9, 11] and (day < 1 or day > 30): \\n\\treturn False \\nif month == 2 and (day < 1 or day > 29): \\n\\treturn False \\nreturn True"}
{"task_id": "HumanEval/125", "completion": "return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "return lst == sorted(lst) and len(lst) == len(set(lst))"}
{"task_id": "HumanEval/127", "completion": "return n > 1 and all(n % i for i in range(2, int(n**0.5) + 1)); start = max(interval1[0], interval2[0]); end = min(interval1[1], interval2[1]); if start > end: return \"NO\"; return \"YES\" if is_prime(end - start) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "if not arr: return None \\nsign_product = 1 \\nmagnitude_sum = 0 \\nfor num in arr: \\n\\tsign_product *= (1 if num > 0 else -1 if num < 0 else 0) \\n\\tmagnitude_sum += abs(num) \\nreturn sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "import heapq \\nn = len(grid) \\ndirections = [(0, 1), (0, -1), (1, 0), (-1, 0)] \\nvisited = set() \\nheap = [(grid[0][0], 0, 0, [grid[0][0]])] \\nwhile heap: \\n\\tval, x, y, path = heapq.heappop(heap) \\n\\tif len(path) == k: n\\t\\treturn path \\n\\tfor dx, dy in directions: \\n\\t\\tnx, ny = x + dx, y + dy \\n\\t\\tif 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: \\n\\t\\t\\tvisited.add((nx, ny)) \\n\\t\\t\\tnew_path = path + [grid[nx][ny]] heapq.heappush(heap, (new_path, nx, ny, new_path)) return []"}
{"task_id": "HumanEval/130", "completion": "if n == 0: return [1] \\nif n == 1: return [1, 3] \\ntri_seq = [1, 3] \\nfor i in range(2, n + 1): \\n\\tif i % 2 == 0: \\n\\t\\ttri_seq.append(1 + i / 2) \\n\\telse: \\n\\t\\ttri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i - 3]) \\nreturn tri_seq"}
{"task_id": "HumanEval/131", "completion": "product = 1 \\nhas_odd = False \\nfor digit in str(n): \\n\\tif int(digit) % 2 != 0: \\n\\t\\tproduct *= int(digit) \\n\\t\\thas_odd = True \\nreturn product if has_odd else 0"}
{"task_id": "HumanEval/132", "completion": "stack = []; for char in string: if char == '[': stack.append(char); elif char == ']' and stack: stack.pop(); else: return False; return len(stack) == 0 and '][' not in string"}
{"task_id": "HumanEval/133", "completion": "import math \\nreturn sum([math.ceil(i)**2 for i in lst])"}
{"task_id": "HumanEval/134", "completion": "return True if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ') else False"}
{"task_id": "HumanEval/135", "completion": "return -1 if all(arr[i] >= arr[i-1] for i in range(1, len(arr))) else next(i for i in range(1, len(arr)) if arr[i] < arr[i-1])"}
{"task_id": "HumanEval/136", "completion": "negatives = [i for i in lst if i < 0] positives = [i for i in lst if i > 0] a = max(negatives) if negatives else None b = min(positives) if positives else None return (a, b)"}
{"task_id": "HumanEval/137", "completion": "a = float(a.replace(',', '.')) if isinstance(a, str) else a; b = float(b.replace(',', '.')) if isinstance(b, str) else b; if a > b: return str(a).replace('.', ',') if ',' in str(a) else a; elif b > a: return str(b).replace('.', ',') if ',' in str(b) else b; else: return None"}
{"task_id": "HumanEval/138", "completion": "return n >= 8 and n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def factorial(num): \\n\\tif num == 0 or num == 1: \\n\\t\\treturn 1 \\n\\telse: \\n\\t\\treturn num * factorial(num - 1) \\nresult = 1 \\nfor i in range(1, n + 1): \\n\\tresult *= factorial(i) \\nreturn result"}
{"task_id": "HumanEval/140", "completion": "import re; return re.sub(' {3,}', '-', text.replace(' ', '_'))"}
{"task_id": "HumanEval/141", "completion": "import re \\nif len(re.findall('\\d', file_name)) > 3: return 'No' \\nif file_name.count('.') != 1: return 'No' \\nname, ext = file_name.split('.') \\nif not name or not name[0].isalpha(): return 'No' \\nif ext not in ['txt', 'exe', 'dll']: return 'No' \\nreturn 'Yes'"}
{"task_id": "HumanEval/142", "completion": "return sum([val**2 if i%3==0 else val**3 if i%4==0 else val for i, val in enumerate(lst)])"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n): return all([(n%j) for j in range(2, int(n**0.5)+1)]) and n>1; def words_in_sentence(sentence): return ' '.join([word for word in sentence.split() if is_prime(len(word))])"}
{"task_id": "HumanEval/144", "completion": "x_num, x_den = map(int, x.split('/')); n_num, n_den = map(int, n.split('/')); return (x_num * n_num) % (x_den * n_den) == 0"}
{"task_id": "HumanEval/145", "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "return len([num for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579'])"}
{"task_id": "HumanEval/147", "completion": "a = [i * i - i + 1 for i in range(1, n + 1)] \\ncount = 0 \\nfor i in range(n): \\n\\tfor j in range(i + 1, n): \\n\\t\\tfor k in range(j + 1, n): \\n\\t\\t\\tif (a[i] + a[j] + a[k]) % 3 == 0: \\n\\t\\t\\t\\tcount += 1 \\nreturn count"}
{"task_id": "HumanEval/148", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] \\nif planet1 not in planets or planet2 not in planets: return () \\nindex1, index2 = planets.index(planet1), planets.index(planet2) \\nif index1 < index2: return tuple(planets[index1+1:index2]) \\nelse: return tuple(planets[index2+1:index1])"}
{"task_id": "HumanEval/149", "completion": "return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n): \\n\\tif n <= 1 or (n % 2 == 0 and n > 2): \\n\\t\\treturn False \\n\\treturn all(n % i for i in range(3, int(n**0.5) + 1, 2)) \\nreturn x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0)"}
{"task_id": "HumanEval/152", "completion": "return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]"}
{"task_id": "HumanEval/153", "completion": "return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))"}
{"task_id": "HumanEval/154", "completion": "for i in range(len(b)): b = b[1:] + b[0]; if b in a: return True; return False"}
{"task_id": "HumanEval/155", "completion": "num = abs(num) \\ndigits = [int(d) for d in str(num)] \\neven_count = sum(1 for d in digits if d % 2 == 0) \\nodd_count = sum(1 for d in digits if d % 2 != 0) \\nreturn even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'} \\nresult = '' \\nfor key in sorted(roman_numerals.keys(), reverse=True): \\n\\twhile number >= key: \\n\\t\\tresult += roman_numerals[key] \\n\\t\\tnumber -= key \\nreturn result"}
{"task_id": "HumanEval/157", "completion": "return True if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2 else False"}
{"task_id": "HumanEval/158", "completion": "return min((word for word in words if len(set(word)) == max(len(set(word)) for word in words)), key=str.lower)"}
{"task_id": "HumanEval/159", "completion": "return [number + min(need, remaining), max(0, remaining - need)]"}
{"task_id": "HumanEval/160", "completion": "expression = str(operand[0]) \\nfor i in range(1, len(operand)): \\n\\texpression += operator[i-1] + str(operand[i]) \\nreturn eval(expression)"}
{"task_id": "HumanEval/161", "completion": "return ''.join([i.lower() if i.isupper() else i.upper() for i in s]) if any(i.isalpha() for i in s) else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib \\nif not text: return None \\nreturn hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "return sorted([i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0])"}